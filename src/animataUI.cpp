// generated by Fast Light User Interface Designer (fluid) version 1.0109

#include "animataUI.h"

void AnimataUI::cb_window_i(Fl_Double_Window*, void*) {
  if (Fl::event()==FL_SHORTCUT && Fl::event_key()==FL_Escape)
   return; // ignore Escape;
}
void AnimataUI::cb_window(Fl_Double_Window* o, void* v) {
  ((AnimataUI*)(o->user_data()))->cb_window_i(o,v);
}

void AnimataUI::cb_New_i(Fl_Menu_*, void*) {
  editorBox->newScene();
}
void AnimataUI::cb_New(Fl_Menu_* o, void* v) {
  ((AnimataUI*)(o->parent()->user_data()))->cb_New_i(o,v);
}

void AnimataUI::cb_Open_i(Fl_Menu_*, void*) {
  char *file = fl_file_chooser("Open File", "*.nmt", "", 1);
if (file != NULL)
{
	editorBox->loadScene(file);
	editorBox->setFilename(file);
};
}
void AnimataUI::cb_Open(Fl_Menu_* o, void* v) {
  ((AnimataUI*)(o->parent()->user_data()))->cb_Open_i(o,v);
}

void AnimataUI::cb_Import_i(Fl_Menu_*, void*) {
  char *file = fl_file_chooser("Open File", "*.nmt", "", 1);
if (file != NULL)
{
	editorBox->importScene(file);
};
}
void AnimataUI::cb_Import(Fl_Menu_* o, void* v) {
  ((AnimataUI*)(o->parent()->user_data()))->cb_Import_i(o,v);
}

void AnimataUI::cb_Save_i(Fl_Menu_* o, void* v) {
  const char *filename = editorBox->getFilename();
if (filename[0] == 0)
{
	cb_Save1(o, v);
	return;
}
else
{
	editorBox->saveScene(filename);
};
}
void AnimataUI::cb_Save(Fl_Menu_* o, void* v) {
  ((AnimataUI*)(o->parent()->user_data()))->cb_Save_i(o,v);
}

void AnimataUI::cb_Save1_i(Fl_Menu_*, void*) {
  char *newfile = fl_file_chooser("Save As", "*.nmt", "", 1);
if (newfile != NULL)
{
	editorBox->saveScene(newfile);
	editorBox->setFilename(newfile);
};
}
void AnimataUI::cb_Save1(Fl_Menu_* o, void* v) {
  ((AnimataUI*)(o->parent()->user_data()))->cb_Save1_i(o,v);
}

void AnimataUI::cb_Quit_i(Fl_Menu_*, void*) {
  //Fl::delete_widget(window);
exit(0);
}
void AnimataUI::cb_Quit(Fl_Menu_* o, void* v) {
  ((AnimataUI*)(o->parent()->user_data()))->cb_Quit_i(o,v);
}

void AnimataUI::cb_About_i(Fl_Menu_*, void*) {
  fl_message("Animata\n\nKitchen Budapest\n\nhttp://kibu.hu/projects/animata");
}
void AnimataUI::cb_About(Fl_Menu_* o, void* v) {
  ((AnimataUI*)(o->parent()->user_data()))->cb_About_i(o,v);
}

Fl_Menu_Item AnimataUI::menu_[] = {
 {"&File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 12, 0},
 {"&New", 0x4006e,  (Fl_Callback*)AnimataUI::cb_New, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"&Open", 0x4006f,  (Fl_Callback*)AnimataUI::cb_Open, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"&Import", 0x40069,  (Fl_Callback*)AnimataUI::cb_Import, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"&Save", 0x40073,  (Fl_Callback*)AnimataUI::cb_Save, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Save &As", 0x50073,  (Fl_Callback*)AnimataUI::cb_Save1, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"&Quit", 0x40071,  (Fl_Callback*)AnimataUI::cb_Quit, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Help", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 12, 0},
 {"Animata Help", 0xffbe,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"&About", 0,  (Fl_Callback*)AnimataUI::cb_About, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

void AnimataUI::cb_tabs_i(Fl_Tabs* o, void*) {
  /* callback to reset the active button when the tab
   is selected again */
settings.mode = ANIMATA_MODE_NONE;

Fl_Tabs* t = (Fl_Tabs*)o;

Fl_Group* g = (Fl_Group*)(t->value());

if(g == imagePanel)
{
	g = imageButtons;
}

int n = g->children();

for (int i = 0; i < n; ++i)
{
	Fl_Button *b = (Fl_Button *)(g->child(i));
	if (b->value() &&
		(b != playback_show_hide)) /* don't call the callback of view/show,
						because it makes the output window flash */
	{
		b->do_callback();
	}
}

editorBox->take_focus();
}
void AnimataUI::cb_tabs(Fl_Tabs* o, void* v) {
  ((AnimataUI*)(o->parent()->user_data()))->cb_tabs_i(o,v);
}

void AnimataUI::cb_Add_i(Fl_Button*, void*) {
  fileChooser->show();

while(fileChooser->visible())
	Fl::wait();

int count = fileChooser->count();

for(int i = 1; i <= count; i++)
{
	const char *filename = fileChooser->value(i);
	loadImage(filename);
};
}
void AnimataUI::cb_Add(Fl_Button* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Add_i(o,v);
}

void AnimataUI::cb_Move_i(Fl_Button*, long v) {
  //printf("BEFORE: MOVE setting MODE is %d\n ", settings.mode);
settings.mode = (ANIMATA_MODES)(unsigned)v;
//printf("AFTER: MOVE setting MODE is %d\n ", settings.mode);
}
void AnimataUI::cb_Move(Fl_Button* o, long v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Move_i(o,v);
}

void AnimataUI::cb_Scale_i(Fl_Button*, long v) {
  //cb_Move
//printf("BEFORE: SCALE setting MODE is %d\n ", settings.mode);
settings.mode = (ANIMATA_MODES)(unsigned)v;
//printf("AFTER: SCALE setting MODE is %d\n ", settings.mode);
}
void AnimataUI::cb_Scale(Fl_Button* o, long v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Scale_i(o,v);
}

void AnimataUI::cb_Create_i(Fl_Button*, long v) {
  /* callback is created in fluid as a static member called cb_Create, which
is used in all the button callbacks, because i have no idea how to create a
callback using a code block, which is static.
*/

settings.prevMode = settings.mode; /* save previous mode to detect mode changes */
settings.mode = (ANIMATA_MODES)(unsigned)v;
}
void AnimataUI::cb_Create(Fl_Button* o, long v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->user_data()))->cb_Create_i(o,v);
}

void AnimataUI::cb_Triangulate_i(Fl_Button* o, void*) {
  editorBox->triangulate();
o->clear();
}
void AnimataUI::cb_Triangulate(Fl_Button* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->user_data()))->cb_Triangulate_i(o,v);
}

void AnimataUI::cb_Texturize_i(Fl_Button* o, long) {
  Texture *texture = editorBox->getTextureManager()->getActiveTexture();

if(texture)
	editorBox->getMesh()->attachTexture(texture);

o->clear();
}
void AnimataUI::cb_Texturize(Fl_Button* o, long v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->user_data()))->cb_Texturize_i(o,v);
}

void AnimataUI::cb_threshold_i(Fl_Value_Slider* o, void*) {
  settings.triangulateAlphaThreshold = (int)(o->value());
}
void AnimataUI::cb_threshold(Fl_Value_Slider* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->user_data()))->cb_threshold_i(o,v);
}

void AnimataUI::cb_jointName_i(Fl_Input* o, void*) {
  tempStorage.str = o->value();
editorBox->setJointPrefsFromUI(PREFS_JOINT_NAME, &tempStorage);
}
void AnimataUI::cb_jointName(Fl_Input* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_jointName_i(o,v);
}

void AnimataUI::cb_jointX_i(Fl_Value_Input* o, void*) {
  tempStorage.f = o->value();
editorBox->setJointPrefsFromUI(PREFS_JOINT_X, &tempStorage);
}
void AnimataUI::cb_jointX(Fl_Value_Input* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_jointX_i(o,v);
}

void AnimataUI::cb_jointY_i(Fl_Value_Input* o, void*) {
  tempStorage.f = o->value();
editorBox->setJointPrefsFromUI(PREFS_JOINT_Y, &tempStorage);
}
void AnimataUI::cb_jointY(Fl_Value_Input* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_jointY_i(o,v);
}

void AnimataUI::cb_jointFixed_i(Fl_Check_Button* o, void*) {
  tempStorage.i = o->value();
editorBox->setJointPrefsFromUI(PREFS_JOINT_FIXED, &tempStorage);
}
void AnimataUI::cb_jointFixed(Fl_Check_Button* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_jointFixed_i(o,v);
}

void AnimataUI::cb_jointOSC_i(Fl_Check_Button* o, void*) {
  tempStorage.i = o->value();
editorBox->setJointPrefsFromUI(PREFS_JOINT_OSC, &tempStorage);
}
void AnimataUI::cb_jointOSC(Fl_Check_Button* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_jointOSC_i(o,v);
}

void AnimataUI::cb_boneName_i(Fl_Input* o, void*) {
  editorBox->setBonePrefsFromUI(o->value());
}
void AnimataUI::cb_boneName(Fl_Input* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_boneName_i(o,v);
}

void AnimataUI::cb_boneStiffness_i(Fl_Eval_Slider* o, void*) {
  editorBox->setBonePrefsFromUI(NULL, o->value());
}
void AnimataUI::cb_boneStiffness(Fl_Eval_Slider* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_boneStiffness_i(o,v);
}

void AnimataUI::cb_boneLengthMult_i(Fl_Value_Slider* o, void*) {
  float m = o->value();
float mil = boneLengthMultMin->value();
float mal = boneLengthMultMax->value();
if (m < mil)
{
	m = mil;
	o->value(m);
}
else if (m > mal)
{
	m = mal;
	o->value(m);
}
editorBox->setBonePrefsFromUI(NULL, -1, m);
}
void AnimataUI::cb_boneLengthMult(Fl_Value_Slider* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_boneLengthMult_i(o,v);
}

void AnimataUI::cb_boneLengthMultMin_i(Fl_Value_Slider* o, void*) {
  float mmin = o->value();
editorBox->setBoneLengthMultMin(mmin);

float mult = boneLengthMult->value();
if (mult < mmin)
{
	boneLengthMult->value(mmin);
	editorBox->setBonePrefsFromUI(NULL, -1, mmin);
};
}
void AnimataUI::cb_boneLengthMultMin(Fl_Value_Slider* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_boneLengthMultMin_i(o,v);
}

void AnimataUI::cb_boneLengthMultMax_i(Fl_Value_Slider* o, void*) {
  float mmax = o->value();
editorBox->setBoneLengthMultMax(mmax);

float mult = boneLengthMult->value();
if (mmax < mult)
{
	boneLengthMult->value(mmax);
	editorBox->setBonePrefsFromUI(NULL, -1, mmax);
};
}
void AnimataUI::cb_boneLengthMultMax(Fl_Value_Slider* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_boneLengthMultMax_i(o,v);
}

void AnimataUI::cb_boneTempo_i(Fl_Value_Slider* o, void*) {
  editorBox->setBoneTempo(o->value());
}
void AnimataUI::cb_boneTempo(Fl_Value_Slider* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_boneTempo_i(o,v);
}

void AnimataUI::cb_attachArea_i(Fl_Value_Slider* o, void*) {
  editorBox->setAttachPrefsFromUI(o->value());
}
void AnimataUI::cb_attachArea(Fl_Value_Slider* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_attachArea_i(o,v);
}

void AnimataUI::cb_attachFalloff_i(Fl_Value_Slider* o, void*) {
  editorBox->setAttachPrefsFromUI(FLT_MAX, o->value());
}
void AnimataUI::cb_attachFalloff(Fl_Value_Slider* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_attachFalloff_i(o,v);
}

void AnimataUI::cb_Attach_i(Fl_Button* o, void*) {
  editorBox->attachVertices();
o->clear();
}
void AnimataUI::cb_Attach(Fl_Button* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Attach_i(o,v);
}

void AnimataUI::cb_Disattach_i(Fl_Button* o, void*) {
  editorBox->disattachVertices();
o->clear();
}
void AnimataUI::cb_Disattach(Fl_Button* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Disattach_i(o,v);
}

void AnimataUI::cb_play_i(Fl_Light_Button* o, void*) {
  settings.playSimulation = o->value();
}
void AnimataUI::cb_play(Fl_Light_Button* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->user_data()))->cb_play_i(o,v);
}

void AnimataUI::cb_iteration_i(Fl_Value_Slider* o, void*) {
  settings.iteration = (int)(o->value());
}
void AnimataUI::cb_iteration(Fl_Value_Slider* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->user_data()))->cb_iteration_i(o,v);
}

void AnimataUI::cb_gravity_i(Fl_Light_Button* o, void*) {
  settings.gravity = o->value();
}
void AnimataUI::cb_gravity(Fl_Light_Button* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->user_data()))->cb_gravity_i(o,v);
}

void AnimataUI::cb__i(Fl_Value_Slider* o, void*) {
  settings.gravityForce = (float)(o->value());
}
void AnimataUI::cb_(Fl_Value_Slider* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->user_data()))->cb__i(o,v);
}

void AnimataUI::cb_1_i(Fl_Dial* o, void*) {
  float a = M_PI*o->value()/180;

settings.gravityX = -sin(a);
settings.gravityY = cos(a);
}
void AnimataUI::cb_1(Fl_Dial* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->user_data()))->cb_1_i(o,v);
}

void AnimataUI::cb_Add1_i(Fl_Button*, void*) {
  Flu_Tree_Browser::Node* n = layerTree->get_selected(1);

if (!n)
{
    n = layerTree->get_root();
}

Layer *layer = (Layer *)n->user_data();

if (layer)
{
  Layer *newLayer = layer->makeLayer();

  Flu_Tree_Browser::Node *newNode = n->add(newLayer->getName());
  newNode->user_data(newLayer);
  layers->redraw();
};
}
void AnimataUI::cb_Add1(Fl_Button* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->user_data()))->cb_Add1_i(o,v);
}

void AnimataUI::cb_Delete_i(Fl_Button*, void*) {
  int n = layerTree->num_selected();

if (!n)
  return;

for (int i = n; i >= 1; i--)
{
  Flu_Tree_Browser::Node* node = layerTree->get_selected(i);
  Layer *layer = (Layer *)node->user_data();

  Layer *parent = layer->getParent();

  if (parent)
  {
    // fprintf(stderr, "deleting layer %x\n", layer);
    // fflush(stderr);

    // set the root layer as current
    editorBox->setCurrentLayer(editorBox->getRootLayer());

    // delete current layer
    int r = parent->deleteSublayer(layer);
    if (r) // error deleting sublayer
    {
      fprintf(stderr, "error deleting %s (%x)\n", layer->getName(), layer);
      continue;
    }
    selector->cancelPickLayer();
  }
  else
  {
    fprintf(stderr, "parent is NULL %s (%x)\n", layer->getName(), layer);
    continue;
  }
  layerTree->remove(node);
}
layers->redraw();
}
void AnimataUI::cb_Delete(Fl_Button* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->user_data()))->cb_Delete_i(o,v);
}

void AnimataUI::cb_layerName_i(Fl_Input* o, void*) {
  tempStorage.str = o->value();
editorBox->setLayerPrefsFromUI(PREFS_LAYER_NAME, &tempStorage);

Flu_Tree_Browser::Node* n = layerTree->get_selected(1);
if (n)
{
    n->label(o->value());
};
}
void AnimataUI::cb_layerName(Fl_Input* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_layerName_i(o,v);
}

void AnimataUI::cb_layerAlpha_i(Fl_Value_Slider* o, void*) {
  tempStorage.f = o->value();
editorBox->setLayerPrefsFromUI(PREFS_LAYER_ALPHA, &tempStorage);
}
void AnimataUI::cb_layerAlpha(Fl_Value_Slider* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_layerAlpha_i(o,v);
}

void AnimataUI::cb_layerVisible_i(Fl_Check_Button* o, long) {
  tempStorage.i = o->value();
editorBox->setLayerPrefsFromUI(PREFS_LAYER_VISIBILITY, &tempStorage);
}
void AnimataUI::cb_layerVisible(Fl_Check_Button* o, long v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_layerVisible_i(o,v);
}

void AnimataUI::cb_Vertex_i(Fl_Check_Button* o, long v) {
  if (o->value())
{
	((AnimataUI*)(o->parent()->parent()->parent()->parent()->user_data()))->settings.display_elements |=
		(unsigned)v;
}
else
{
	((AnimataUI*)(o->parent()->parent()->parent()->parent()->user_data()))->settings.display_elements &=
		~(unsigned)v;

};
}
void AnimataUI::cb_Vertex(Fl_Check_Button* o, long v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Vertex_i(o,v);
}

void AnimataUI::cb_playback_show_hide_i(Fl_Check_Button* o, void*) {
  if(o->value())
{
  //playback->border(0);
  playback->show();
  //playback->set_visible();
}
else
{
  playback->hide();
  //playback->clear_visible();
};
}
void AnimataUI::cb_playback_show_hide(Fl_Check_Button* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->user_data()))->cb_playback_show_hide_i(o,v);
}

void AnimataUI::cb_layerTree_i(Flu_Tree_Browser*, void*) {
  Flu_Tree_Browser::Node* n = layerTree->get_selected(1);

if (n)
// && n != layerTree->get_root())
{
	Layer *l = (Layer *)n->user_data();

	if (l)
	{
		editorBox->setCurrentLayer(l);
		editorBox->setLayerUIPrefs(l);
	}
}

/*
int l = layerTree->num_selected();
Layer *layers = new Layer[l];
Layer *actLayer = layers;
for (int i = 0; i < l; i++)
{
	Flu_Tree_Browser::Node* n = layerTree->get_selected(i);
	actLayer = (Layer *)n->user_data();
	actLayer++;
}
editorBox->setSelectedLayers(layers, l);
delete [] layers;
*/

window->redraw();
}
void AnimataUI::cb_layerTree(Flu_Tree_Browser* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->user_data()))->cb_layerTree_i(o,v);
}

AnimataUI::AnimataUI() {
  { Fl_Double_Window* o = window = new Fl_Double_Window(855, 650, "animata");
    window->box(FL_BORDER_BOX);
    window->color(FL_FOREGROUND_COLOR);
    window->selection_color(FL_BACKGROUND2_COLOR);
    window->callback((Fl_Callback*)cb_window, (void*)(this));
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 900, 20);
      o->box(FL_BORDER_BOX);
      o->down_box(FL_BORDER_BOX);
      o->color((Fl_Color)30);
      o->selection_color((Fl_Color)30);
      o->labelsize(12);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->textfont(4);
      o->textcolor(7);
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { tabs = new Fl_Tabs(0, 500, 2048, 160, "tabs");
      tabs->box(FL_BORDER_BOX);
      tabs->color((Fl_Color)21);
      tabs->selection_color((Fl_Color)3);
      tabs->callback((Fl_Callback*)cb_tabs);
      tabs->align(FL_ALIGN_CENTER);
      { Fl_Group* o = imagePanel = new Fl_Group(0, 520, 2048, 140, "&1 Image");
        imagePanel->tooltip("Add, move and scale image textures in this tab.");
        imagePanel->color((Fl_Color)30);
        imagePanel->selection_color((Fl_Color)30);
        imagePanel->labelsize(11);
        imagePanel->labelcolor(FL_BACKGROUND2_COLOR);
        imagePanel->hide();
        { Fl_Group* o = imageButtons = new Fl_Group(5, 530, 105, 120, "Image Buttons");
          imageButtons->labeltype(FL_NO_LABEL);
          { Fl_Button* o = new Fl_Button(15, 606, 90, 20, "Add Image");
            o->tooltip("(A)");
            o->box(FL_BORDER_BOX);
            o->shortcut(0x61);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Add);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(15, 535, 90, 20, "Move");
            o->tooltip("(M)");
            o->type(102);
            o->box(FL_BORDER_BOX);
            o->down_box(FL_BORDER_BOX);
            o->value(1);
            o->shortcut(0x6d);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Move, (void*)(ANIMATA_MODE_TEXTURE_POSITION));
            o->when(FL_WHEN_CHANGED);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(15, 554, 90, 20, "Scale");
            o->tooltip("(S)");
            o->type(102);
            o->box(FL_BORDER_BOX);
            o->down_box(FL_BORDER_BOX);
            o->shortcut(0x73);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Scale, (void*)(ANIMATA_MODE_TEXTURE_SCALE));
            o->when(FL_WHEN_CHANGED);
          } // Fl_Button* o
          o->resizable(NULL);
          imageButtons->end();
        } // Fl_Group* imageButtons
        { imageScrollArea = new Fl_Scroll(135, 535, 710, 106);
          imageScrollArea->box(FL_FLAT_BOX);
          imageScrollArea->color((Fl_Color)36);
          imageScrollArea->selection_color((Fl_Color)36);
          { Fl_Pack* o = imagePack = new Fl_Pack(140, 540, 700, 80);
            imagePack->type(1);
            imagePack->color((Fl_Color)36);
            imagePack->selection_color((Fl_Color)36);
            o->spacing(10);
            imagePack->end();
          } // Fl_Pack* imagePack
          imageScrollArea->end();
        } // Fl_Scroll* imageScrollArea
        o->resizable(imageScrollArea);
        imagePanel->end();
      } // Fl_Group* imagePanel
      { Fl_Group* o = new Fl_Group(0, 525, 2048, 135, "&2 Mesh");
        o->tooltip("Create the mesh in this tab.");
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)30);
        o->selection_color((Fl_Color)30);
        o->labelsize(11);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->hide();
        { Fl_Button* o = new Fl_Button(15, 535, 90, 20, "Create Vertex");
          o->tooltip("(V)");
          o->type(102);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->value(1);
          o->shortcut(0x76);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Create, (void*)(ANIMATA_MODE_CREATE_VERTEX));
          o->when(FL_WHEN_CHANGED);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(15, 554, 90, 20, "Create Triangle");
          o->tooltip("(T)");
          o->type(102);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->shortcut(0x74);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Create, (void*)(ANIMATA_MODE_CREATE_TRIANGLE));
          o->when(FL_WHEN_CHANGED);
          /* how to create static callbacks? */
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(110, 554, 90, 20, "Triangulate");
          o->tooltip("(A)");
          o->type(1);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->shortcut(0x61);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Triangulate);
          o->when(FL_WHEN_CHANGED);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(15, 573, 90, 20, "Texturize");
          o->tooltip("(X)");
          o->type(1);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->shortcut(0x78);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Texturize, (void*)(ANIMATA_MODE_TEXTURIZE));
          o->when(FL_WHEN_CHANGED);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(15, 606, 90, 20, "Select / Move");
          o->tooltip("(S)");
          o->type(102);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->shortcut(0x73);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Create, (void*)(ANIMATA_MODE_MESH_SELECT));
          o->when(FL_WHEN_CHANGED);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(15, 625, 90, 20, "Delete");
          o->tooltip("(D)");
          o->type(102);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->shortcut(0x64);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Create, (void*)(ANIMATA_MODE_MESH_DELETE));
          o->when(FL_WHEN_CHANGED);
        } // Fl_Button* o
        { Fl_Value_Slider* o = new Fl_Value_Slider(208, 556, 175, 17, "threshold");
          o->type(1);
          o->box(FL_BORDER_BOX);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labeltype(FL_NO_LABEL);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->maximum(255);
          o->step(1);
          o->value(100);
          o->textcolor(7);
          o->callback((Fl_Callback*)cb_threshold);
          o->align(FL_ALIGN_TOP_LEFT);
        } // Fl_Value_Slider* o
        o->resizable(NULL);
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 525, 2048, 135, "&3 Skeleton");
        o->tooltip("Create the skeleton in this tab.");
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)30);
        o->selection_color((Fl_Color)30);
        o->labelsize(11);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        { Fl_Button* o = new Fl_Button(15, 535, 90, 20, "Create Joint");
          o->tooltip("(J)");
          o->type(102);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->value(1);
          o->shortcut(0x6a);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Create, (void*)(ANIMATA_MODE_CREATE_JOINT));
          o->when(FL_WHEN_CHANGED);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(15, 554, 90, 20, "Create Bone");
          o->tooltip("(B)");
          o->type(102);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->shortcut(0x62);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Create, (void*)(ANIMATA_MODE_CREATE_BONE));
          o->when(FL_WHEN_CHANGED);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(15, 573, 90, 20, "Attach Vertices");
          o->tooltip("(A)");
          o->type(102);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->shortcut(0x61);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Create, (void*)(ANIMATA_MODE_ATTACH_VERTICES));
          o->when(FL_WHEN_CHANGED);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(15, 606, 90, 20, "Select / Move");
          o->tooltip("(S)");
          o->type(102);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->shortcut(0x73);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Create, (void*)(ANIMATA_MODE_SKELETON_SELECT));
          o->when(FL_WHEN_CHANGED);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(15, 625, 90, 20, "Delete");
          o->tooltip("(D)");
          o->type(102);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->shortcut(0x64);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Create, (void*)(ANIMATA_MODE_SKELETON_DELETE));
          o->when(FL_WHEN_CHANGED);
        } // Fl_Button* o
        { skeletonPrefTabs = new Fl_Tabs(135, 535, 640, 110);
          skeletonPrefTabs->box(FL_NO_BOX);
          skeletonPrefTabs->color((Fl_Color)30);
          skeletonPrefTabs->selection_color((Fl_Color)30);
          { jointPrefs = new Fl_Group(135, 535, 570, 110);
            jointPrefs->color((Fl_Color)30);
            jointPrefs->selection_color((Fl_Color)30);
            { Fl_Box* o = new Fl_Box(140, 539, 43, 16, "Joint");
              o->color((Fl_Color)30);
              o->selection_color((Fl_Color)30);
              o->labelfont(1);
              o->labelsize(12);
              o->labelcolor((Fl_Color)3);
              o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
            } // Fl_Box* o
            { jointName = new Fl_Input(185, 560, 200, 20, "Name:");
              jointName->box(FL_BORDER_BOX);
              jointName->color((Fl_Color)30);
              jointName->selection_color((Fl_Color)30);
              jointName->labelsize(10);
              jointName->labelcolor(FL_BACKGROUND2_COLOR);
              jointName->textsize(12);
              jointName->textcolor(22);
              jointName->callback((Fl_Callback*)cb_jointName);
              jointName->when(FL_WHEN_CHANGED);
            } // Fl_Input* jointName
            { jointX = new Fl_Value_Input(185, 585, 50, 20, "Pos: x ");
              jointX->box(FL_BORDER_BOX);
              jointX->color((Fl_Color)30);
              jointX->selection_color((Fl_Color)30);
              jointX->labelsize(10);
              jointX->labelcolor(FL_BACKGROUND2_COLOR);
              jointX->textsize(10);
              jointX->textcolor(16);
              jointX->callback((Fl_Callback*)cb_jointX);
              jointX->when(FL_WHEN_ENTER_KEY);
            } // Fl_Value_Input* jointX
            { jointY = new Fl_Value_Input(250, 585, 50, 20, "y ");
              jointY->box(FL_BORDER_BOX);
              jointY->color((Fl_Color)30);
              jointY->selection_color((Fl_Color)30);
              jointY->labelsize(10);
              jointY->labelcolor(FL_BACKGROUND2_COLOR);
              jointY->textsize(10);
              jointY->textcolor(16);
              jointY->callback((Fl_Callback*)cb_jointY);
              jointY->when(FL_WHEN_ENTER_KEY);
            } // Fl_Value_Input* jointY
            { jointFixed = new Fl_Check_Button(310, 585, 50, 20, "fixed");
              jointFixed->box(FL_BORDER_BOX);
              jointFixed->down_box(FL_BORDER_BOX);
              jointFixed->color((Fl_Color)30);
              jointFixed->selection_color((Fl_Color)3);
              jointFixed->labelsize(10);
              jointFixed->labelcolor(FL_BACKGROUND2_COLOR);
              jointFixed->callback((Fl_Callback*)cb_jointFixed);
            } // Fl_Check_Button* jointFixed
            { jointOSC = new Fl_Check_Button(185, 610, 50, 20, "OSC");
              jointOSC->box(FL_BORDER_BOX);
              jointOSC->down_box(FL_BORDER_BOX);
              jointOSC->color((Fl_Color)30);
              jointOSC->selection_color((Fl_Color)3);
              jointOSC->labelsize(10);
              jointOSC->labelcolor(FL_BACKGROUND2_COLOR);
              jointOSC->callback((Fl_Callback*)cb_jointOSC);
            } // Fl_Check_Button* jointOSC
            jointPrefs->end();
          } // Fl_Group* jointPrefs
          { bonePrefs = new Fl_Group(135, 535, 640, 110);
            bonePrefs->color((Fl_Color)30);
            bonePrefs->selection_color((Fl_Color)30);
            bonePrefs->hide();
            { Fl_Box* o = new Fl_Box(140, 539, 43, 16, "Bone");
              o->labelfont(1);
              o->labelsize(12);
              o->labelcolor((Fl_Color)3);
              o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
            } // Fl_Box* o
            { boneName = new Fl_Input(185, 560, 200, 20, "Name:");
              boneName->box(FL_BORDER_BOX);
              boneName->color((Fl_Color)30);
              boneName->selection_color((Fl_Color)30);
              boneName->labelsize(10);
              boneName->labelcolor(FL_BACKGROUND2_COLOR);
              boneName->textsize(12);
              boneName->textcolor(22);
              boneName->callback((Fl_Callback*)cb_boneName);
              boneName->when(FL_WHEN_CHANGED);
            } // Fl_Input* boneName
            { boneStiffness = new Fl_Eval_Slider(185, 583, 250, 17, "Stiffness:");
              boneStiffness->type(1);
              boneStiffness->box(FL_BORDER_BOX);
              boneStiffness->color((Fl_Color)30);
              boneStiffness->selection_color((Fl_Color)3);
              boneStiffness->labeltype(FL_NORMAL_LABEL);
              boneStiffness->labelfont(0);
              boneStiffness->labelsize(10);
              boneStiffness->labelcolor(FL_BACKGROUND2_COLOR);
              boneStiffness->minimum(0.16);
              boneStiffness->maximum(0.840896);
              boneStiffness->step(0.001);
              boneStiffness->value(0.840896);
              boneStiffness->textcolor(16);
              boneStiffness->callback((Fl_Callback*)cb_boneStiffness);
              boneStiffness->align(FL_ALIGN_LEFT);
              boneStiffness->when(FL_WHEN_CHANGED);
            } // Fl_Eval_Slider* boneStiffness
            { boneLengthMult = new Fl_Value_Slider(481, 560, 250, 17, "Lm:");
              boneLengthMult->tooltip("Bone length multiplier");
              boneLengthMult->type(1);
              boneLengthMult->box(FL_BORDER_BOX);
              boneLengthMult->color((Fl_Color)30);
              boneLengthMult->selection_color((Fl_Color)3);
              boneLengthMult->labelsize(10);
              boneLengthMult->labelcolor(FL_BACKGROUND2_COLOR);
              boneLengthMult->minimum(0.01);
              boneLengthMult->maximum(2);
              boneLengthMult->value(1);
              boneLengthMult->textcolor(16);
              boneLengthMult->callback((Fl_Callback*)cb_boneLengthMult);
              boneLengthMult->align(FL_ALIGN_LEFT);
            } // Fl_Value_Slider* boneLengthMult
            { boneLengthMultMin = new Fl_Value_Slider(481, 581, 250, 17, "Min:");
              boneLengthMultMin->tooltip("Minimum of length multiplier");
              boneLengthMultMin->type(1);
              boneLengthMultMin->box(FL_BORDER_BOX);
              boneLengthMultMin->color((Fl_Color)30);
              boneLengthMultMin->selection_color((Fl_Color)3);
              boneLengthMultMin->labelsize(10);
              boneLengthMultMin->labelcolor(FL_BACKGROUND2_COLOR);
              boneLengthMultMin->minimum(0.01);
              boneLengthMultMin->maximum(2);
              boneLengthMultMin->value(0.01);
              boneLengthMultMin->textcolor(16);
              boneLengthMultMin->callback((Fl_Callback*)cb_boneLengthMultMin);
              boneLengthMultMin->align(FL_ALIGN_LEFT);
            } // Fl_Value_Slider* boneLengthMultMin
            { boneLengthMultMax = new Fl_Value_Slider(481, 600, 250, 17, "Max:");
              boneLengthMultMax->tooltip("Maximum of length multiplier");
              boneLengthMultMax->type(1);
              boneLengthMultMax->box(FL_BORDER_BOX);
              boneLengthMultMax->color((Fl_Color)30);
              boneLengthMultMax->selection_color((Fl_Color)3);
              boneLengthMultMax->labelsize(10);
              boneLengthMultMax->labelcolor(FL_BACKGROUND2_COLOR);
              boneLengthMultMax->maximum(2);
              boneLengthMultMax->value(1);
              boneLengthMultMax->textcolor(16);
              boneLengthMultMax->callback((Fl_Callback*)cb_boneLengthMultMax);
              boneLengthMultMax->align(FL_ALIGN_LEFT);
            } // Fl_Value_Slider* boneLengthMultMax
            { boneTempo = new Fl_Value_Slider(481, 620, 249, 17, "Tempo: ");
              boneTempo->type(1);
              boneTempo->box(FL_BORDER_BOX);
              boneTempo->color((Fl_Color)30);
              boneTempo->selection_color((Fl_Color)3);
              boneTempo->labelsize(10);
              boneTempo->labelcolor(FL_BACKGROUND2_COLOR);
              boneTempo->step(0.001);
              boneTempo->textcolor(16);
              boneTempo->callback((Fl_Callback*)cb_boneTempo);
              boneTempo->align(FL_ALIGN_LEFT);
            } // Fl_Value_Slider* boneTempo
            bonePrefs->end();
          } // Fl_Group* bonePrefs
          { attachVertices = new Fl_Group(135, 535, 570, 110);
            attachVertices->color((Fl_Color)30);
            attachVertices->selection_color((Fl_Color)30);
            attachVertices->hide();
            { Fl_Box* o = new Fl_Box(140, 539, 110, 16, "Attach Vertices");
              o->labelfont(1);
              o->labelsize(12);
              o->labelcolor((Fl_Color)3);
              o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
            } // Fl_Box* o
            { attachArea = new Fl_Value_Slider(185, 560, 450, 17, "Area:");
              attachArea->type(1);
              attachArea->box(FL_BORDER_BOX);
              attachArea->color((Fl_Color)30);
              attachArea->selection_color((Fl_Color)3);
              attachArea->labelsize(10);
              attachArea->labelcolor(FL_BACKGROUND2_COLOR);
              attachArea->maximum(10);
              attachArea->value(1);
              attachArea->textcolor(22);
              attachArea->callback((Fl_Callback*)cb_attachArea);
              attachArea->align(FL_ALIGN_LEFT);
            } // Fl_Value_Slider* attachArea
            { attachFalloff = new Fl_Value_Slider(185, 580, 450, 17, "Falloff:");
              attachFalloff->type(1);
              attachFalloff->box(FL_BORDER_BOX);
              attachFalloff->color((Fl_Color)30);
              attachFalloff->selection_color((Fl_Color)3);
              attachFalloff->labelsize(10);
              attachFalloff->labelcolor(FL_BACKGROUND2_COLOR);
              attachFalloff->minimum(0.01);
              attachFalloff->value(1);
              attachFalloff->textcolor(22);
              attachFalloff->callback((Fl_Callback*)cb_attachFalloff);
              attachFalloff->align(FL_ALIGN_LEFT);
            } // Fl_Value_Slider* attachFalloff
            { Fl_Button* o = new Fl_Button(140, 621, 100, 20, "Attach");
              o->tooltip("(SHIFT+A)");
              o->box(FL_BORDER_BOX);
              o->down_box(FL_BORDER_BOX);
              o->shortcut(0x10061);
              o->color((Fl_Color)30);
              o->selection_color((Fl_Color)3);
              o->labelsize(10);
              o->labelcolor(FL_BACKGROUND2_COLOR);
              o->callback((Fl_Callback*)cb_Attach);
            } // Fl_Button* o
            { Fl_Button* o = new Fl_Button(245, 621, 100, 20, "Disattach");
              o->tooltip("(SHIFT+D)");
              o->box(FL_BORDER_BOX);
              o->down_box(FL_BORDER_BOX);
              o->shortcut(0x10064);
              o->color((Fl_Color)30);
              o->selection_color((Fl_Color)3);
              o->labelsize(10);
              o->labelcolor(FL_BACKGROUND2_COLOR);
              o->callback((Fl_Callback*)cb_Disattach);
            } // Fl_Button* o
            attachVertices->end();
          } // Fl_Group* attachVertices
          { noPrefs = new Fl_Group(135, 535, 570, 110);
            noPrefs->color((Fl_Color)35);
            noPrefs->selection_color((Fl_Color)35);
            noPrefs->hide();
            noPrefs->end();
          } // Fl_Group* noPrefs
          skeletonPrefTabs->end();
        } // Fl_Tabs* skeletonPrefTabs
        o->resizable(NULL);
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 525, 2048, 135, "&4 Automata");
        o->tooltip("Set up animation settings in this tab.");
        o->box(FL_BORDER_BOX);
        o->color((Fl_Color)30);
        o->selection_color((Fl_Color)30);
        o->labelsize(11);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->hide();
        { Fl_Light_Button* o = new Fl_Light_Button(15, 535, 95, 20, "play simulation");
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->value(1);
          o->shortcut(0x20);
          o->color((Fl_Color)30);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_play);
        } // Fl_Light_Button* o
        { Fl_Value_Slider* o = new Fl_Value_Slider(15, 625, 220, 17, "iteration");
          o->type(1);
          o->box(FL_BORDER_BOX);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->minimum(1);
          o->maximum(200);
          o->step(1);
          o->value(40);
          o->textcolor(7);
          o->callback((Fl_Callback*)cb_iteration);
          o->align(FL_ALIGN_TOP_LEFT);
        } // Fl_Value_Slider* o
        { Fl_Light_Button* o = new Fl_Light_Button(25, 569, 95, 20, "gravity");
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->color((Fl_Color)30);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_gravity);
        } // Fl_Light_Button* o
        { Fl_Value_Slider* o = new Fl_Value_Slider(25, 588, 95, 17);
          o->type(1);
          o->box(FL_BORDER_BOX);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->value(0.5);
          o->textcolor(7);
          o->callback((Fl_Callback*)cb_);
          o->align(FL_ALIGN_RIGHT);
        } // Fl_Value_Slider* o
        { Fl_Dial* o = new Fl_Dial(135, 570, 35, 35);
          o->type(1);
          o->box(FL_OVAL_FRAME);
          o->color(FL_FOREGROUND_COLOR);
          o->maximum(360);
          o->step(1);
          o->callback((Fl_Callback*)cb_1);
          o->angles(0, 360);
        } // Fl_Dial* o
        o->resizable(NULL);
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 525, 2048, 135, "&5 Layer");
        o->tooltip("Set up layering in this tab.");
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)30);
        o->selection_color((Fl_Color)30);
        o->labelsize(11);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->hide();
        { Fl_Button* o = new Fl_Button(15, 535, 90, 20, "Move");
          o->tooltip("(M)");
          o->type(102);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->value(1);
          o->shortcut(0x6d);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Create, (void*)(ANIMATA_MODE_LAYER_MOVE));
          o->when(FL_WHEN_CHANGED);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(15, 554, 90, 20, "Scale");
          o->tooltip("(S)");
          o->type(102);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->shortcut(0x73);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Create, (void*)(ANIMATA_MODE_LAYER_SCALE));
          o->when(FL_WHEN_CHANGED);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(15, 573, 90, 20, "Depth");
          o->tooltip("(E)");
          o->type(102);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->shortcut(0x65);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Create, (void*)(ANIMATA_MODE_LAYER_DEPTH));
          o->when(FL_WHEN_CHANGED);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(15, 606, 90, 20, "Add");
          o->tooltip("(A)");
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->shortcut(0x61);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Add1);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(15, 625, 90, 20, "Delete");
          o->tooltip("(D)");
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->shortcut(0x64);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Delete);
        } // Fl_Button* o
        { Fl_Group* o = new Fl_Group(135, 535, 570, 110);
          o->box(FL_BORDER_BOX);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)30);
          { Fl_Box* o = new Fl_Box(140, 539, 43, 16, "Preferences");
            o->labelfont(1);
            o->labelsize(12);
            o->labelcolor((Fl_Color)3);
            o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { layerName = new Fl_Input(195, 560, 250, 20, "Name:");
            layerName->box(FL_BORDER_BOX);
            layerName->color((Fl_Color)30);
            layerName->selection_color((Fl_Color)30);
            layerName->labelsize(10);
            layerName->labelcolor(FL_BACKGROUND2_COLOR);
            layerName->textsize(12);
            layerName->textcolor(22);
            layerName->callback((Fl_Callback*)cb_layerName);
            layerName->when(FL_WHEN_CHANGED);
          } // Fl_Input* layerName
          { layerAlpha = new Fl_Value_Slider(195, 583, 249, 17, "Alpha: ");
            layerAlpha->type(1);
            layerAlpha->box(FL_BORDER_BOX);
            layerAlpha->color((Fl_Color)30);
            layerAlpha->selection_color((Fl_Color)3);
            layerAlpha->labelsize(10);
            layerAlpha->labelcolor(FL_BACKGROUND2_COLOR);
            layerAlpha->step(0.001);
            layerAlpha->textcolor(16);
            layerAlpha->callback((Fl_Callback*)cb_layerAlpha);
            layerAlpha->align(FL_ALIGN_LEFT);
          } // Fl_Value_Slider* layerAlpha
          { layerVisible = new Fl_Check_Button(195, 605, 15, 20, "Visible: ");
            layerVisible->down_box(FL_BORDER_BOX);
            layerVisible->value(1);
            layerVisible->color((Fl_Color)30);
            layerVisible->selection_color((Fl_Color)3);
            layerVisible->labelsize(10);
            layerVisible->labelcolor(FL_BACKGROUND2_COLOR);
            layerVisible->callback((Fl_Callback*)cb_layerVisible);
            layerVisible->align(FL_ALIGN_LEFT);
          } // Fl_Check_Button* layerVisible
          o->end();
        } // Fl_Group* o
        o->resizable(NULL);
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 525, 2048, 135, "&6 Camera");
        o->tooltip("Set up cameras in this tab.");
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)30);
        o->selection_color((Fl_Color)30);
        o->labelsize(11);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->hide();
        o->resizable(NULL);
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 525, 2048, 135, "&7 View");
        o->tooltip("Set up views in this tab.");
        o->box(FL_BORDER_BOX);
        o->color((Fl_Color)30);
        o->selection_color((Fl_Color)30);
        o->labelsize(11);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->hide();
        { Fl_Group* o = new Fl_Group(5, 545, 70, 110, "Editor");
          o->color(FL_FOREGROUND_COLOR);
          o->selection_color((Fl_Color)22);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          { Fl_Check_Button* o = new Fl_Check_Button(10, 550, 65, 20, "Vertex");
            o->down_box(FL_BORDER_BOX);
            o->value(1);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Vertex, (void*)(DISPLAY_EDITOR_VERTEX));
            o->do_callback();
          } // Fl_Check_Button* o
          { Fl_Check_Button* o = new Fl_Check_Button(10, 570, 65, 20, "Triangle");
            o->down_box(FL_BORDER_BOX);
            o->value(1);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Vertex, (void*)(DISPLAY_EDITOR_TRIANGLE));
            o->do_callback();
          } // Fl_Check_Button* o
          { Fl_Check_Button* o = new Fl_Check_Button(10, 590, 65, 20, "Joint");
            o->down_box(FL_BORDER_BOX);
            o->value(1);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Vertex, (void*)(DISPLAY_EDITOR_JOINT));
            o->do_callback();
          } // Fl_Check_Button* o
          { Fl_Check_Button* o = new Fl_Check_Button(10, 610, 65, 20, "Bone");
            o->down_box(FL_BORDER_BOX);
            o->value(1);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Vertex, (void*)(DISPLAY_EDITOR_BONE));
            o->do_callback();
          } // Fl_Check_Button* o
          { Fl_Check_Button* o = new Fl_Check_Button(10, 630, 65, 25, "Texture");
            o->down_box(FL_BORDER_BOX);
            o->value(1);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Vertex, (void*)(DISPLAY_EDITOR_TEXTURE));
            o->do_callback();
          } // Fl_Check_Button* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(80, 545, 70, 110, "Output");
          o->color(FL_FOREGROUND_COLOR);
          o->selection_color((Fl_Color)22);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          { Fl_Check_Button* o = new Fl_Check_Button(85, 550, 65, 20, "Vertex");
            o->down_box(FL_BORDER_BOX);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Vertex, (void*)(DISPLAY_OUTPUT_VERTEX));
            o->do_callback();
          } // Fl_Check_Button* o
          { Fl_Check_Button* o = new Fl_Check_Button(85, 570, 65, 20, "Triangle");
            o->down_box(FL_BORDER_BOX);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Vertex, (void*)(DISPLAY_OUTPUT_TRIANGLE));
            o->do_callback();
          } // Fl_Check_Button* o
          { Fl_Check_Button* o = new Fl_Check_Button(85, 590, 65, 20, "Joint");
            o->down_box(FL_BORDER_BOX);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Vertex, (void*)(DISPLAY_OUTPUT_JOINT));
            o->do_callback();
          } // Fl_Check_Button* o
          { Fl_Check_Button* o = new Fl_Check_Button(85, 610, 65, 20, "Bone");
            o->down_box(FL_BORDER_BOX);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Vertex, (void*)(DISPLAY_OUTPUT_BONE));
            o->do_callback();
          } // Fl_Check_Button* o
          { Fl_Check_Button* o = new Fl_Check_Button(85, 630, 65, 25, "Texture");
            o->down_box(FL_BORDER_BOX);
            o->value(1);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Vertex, (void*)(DISPLAY_OUTPUT_TEXTURE));
            o->do_callback();
          } // Fl_Check_Button* o
          o->end();
        } // Fl_Group* o
        { playback_show_hide = new Fl_Check_Button(140, 525, 95, 25, "show / hide");
          playback_show_hide->tooltip("(S)");
          playback_show_hide->down_box(FL_BORDER_BOX);
          playback_show_hide->shortcut(0x73);
          playback_show_hide->color((Fl_Color)30);
          playback_show_hide->selection_color((Fl_Color)3);
          playback_show_hide->labelcolor(FL_BACKGROUND2_COLOR);
          playback_show_hide->callback((Fl_Callback*)cb_playback_show_hide);
        } // Fl_Check_Button* playback_show_hide
        o->resizable(NULL);
        o->end();
      } // Fl_Group* o
      tabs->end();
      Fl_Group::current()->resizable(tabs);
    } // Fl_Tabs* tabs
    { editorBox = new AnimataWindow(0, 20, 640, 480, "editor");
      editorBox->box(FL_BORDER_BOX);
      editorBox->color(FL_FOREGROUND_COLOR);
      editorBox->selection_color(FL_FOREGROUND_COLOR);
      editorBox->labeltype(FL_NORMAL_LABEL);
      editorBox->labelfont(0);
      editorBox->labelsize(14);
      editorBox->labelcolor(FL_FOREGROUND_COLOR);
      editorBox->align(FL_ALIGN_CENTER);
      editorBox->when(FL_WHEN_RELEASE);
    } // AnimataWindow* editorBox
    { layers = new Fl_Group(640, 20, 220, 501);
      layers->color((Fl_Color)22);
      layers->selection_color((Fl_Color)22);
      layers->labeltype(FL_NO_LABEL);
      layers->labelcolor(FL_GRAY0);
      { layerTree = new Flu_Tree_Browser(640, 20, 215, 501, "layers");
        layerTree->box(FL_BORDER_BOX);
        layerTree->color((Fl_Color)30);
        layerTree->selection_color((Fl_Color)31);
        layerTree->labeltype(FL_NO_LABEL);
        layerTree->labelfont(0);
        layerTree->labelsize(14);
        layerTree->labelcolor(FL_BACKGROUND2_COLOR);
        layerTree->callback((Fl_Callback*)cb_layerTree);
        layerTree->align(FL_ALIGN_TOP);
        layerTree->when(FL_WHEN_CHANGED);
        layerTree->auto_branches(true); layerTree->insertion_mode(FLU_INSERT_BACK);
        layerTree->always_open(true); /* root node is always open */
        layerTree->selection_drag_mode(FLU_DRAG_TO_MOVE); layerTree->allow_dnd(true); /* FIXME */
        layerTree->end();
      } // Flu_Tree_Browser* layerTree
      layers->end();
    } // Fl_Group* layers
    { extra_includes_etc = new Fl_Group(2048, 2048, 0, 0);
      extra_includes_etc->end();
    } // Fl_Group* extra_includes_etc
    o->resizable(editorBox);
    window->size_range(700, 500);
    window->end();
  } // Fl_Double_Window* window
  fileChooser = new Fl_File_Chooser(".", "Image Files (*.{jpg,png})", 1, "choose");
playback = new Playback(0, 0, 640, 360);
playback->getCamera()->setParent(editorBox->getCamera());
//editorBox->getCamera()->setClone(playback->getCamera()->setCloned());
}

/* Icon includes */
#include <FL/x.H>
#include <X11/xpm.h>
#include "animata.xpm"

void AnimataUI::show() {

    Pixmap p, mask;

    XpmCreatePixmapFromData(fl_display, DefaultRootWindow(fl_display),icon_xpm, &p, &mask, NULL);

    window->icon((char *)p);

    settings.mode = ANIMATA_MODE_TEXTURE_POSITION;
    imagePanel->set_visible();
    window->show();
}

void AnimataUI::fullscreen() {
  window->fullscreen();
}

void AnimataUI::resize(int x, int y, int w, int h) {
  window->resize(x, y, w, h);
}

ImageBox * AnimataUI::loadImage(const char *filename, bool bNoDuplicates) {
    if (!filename) {
        return NULL;
    }

    // check if this image is already loaded
    if(bNoDuplicates) {
        for(int i = 0; i < imagePack->children(); i++)
        {
            ImageBox *box = (ImageBox*)imagePack->child(i);

            if(!strcmp(filename, box->getFilename())) {

                imagePack->remove(box);
                //return box;
            }
        }
    }

    const char *ext = strrchr(filename, '.');
    Fl_Image *image = NULL;

    if (strcmp(ext, ".jpg") == 0)
    {
        image = new Fl_JPEG_Image(filename);
    }
    else
    if (strcmp(ext, ".png") == 0)
    {
        image = new Fl_PNG_Image(filename);
    }
    else
    {
        return NULL;
    }

    if ((image->h() == 0) || (image->w() == 0))
        return NULL;

    ImageBox* box = new ImageBox(filename, image, imagePack->x(), imagePack->y(), 80);
    imagePack->add(box);

    imageScrollArea->redraw();

    return box;
}

AnimataUI::~AnimataUI() {
    delete editorBox;
    delete fileChooser;
    delete playback;
}

void AnimataUI::refreshLayerTree(Layer *root) {
    clearLayerTree();

    Flu_Tree_Browser::Node* rootNode = layerTree->get_root();

    rootNode->label(root->getName());
    rootNode->user_data(root); //editorBox->getRootLayer());

for(unsigned i = 0; i < root->getLayers()->size(); i++)
{
    Layer *l = (*root->getLayers())[i];

    addLayerNodeRecursive(l, rootNode);
}

/*
playback->setRootLayer(root);
*/
playback->setAllLayers(editorBox->getAllLayers());

    layers->redraw();
}

void AnimataUI::clearLayerTree() {
    layerTree->clear();
    layerTree->redraw();
}

void AnimataUI::addLayerNodeRecursive(Layer *layer, Flu_Tree_Browser::Node *node) {
  Flu_Tree_Browser::Node *newNode = node->add(layer->getName());

if (!newNode) /* probably branch duplication */
{
  /* try to modify name */
  char newName[512];
  snprintf(newName, 511, "%s", layer->getName());
  int len = strlen(newName) + 5;
  while (len < 512)
  {
    strcat(newName, " copy");
    newNode = node->add(newName);
    if (newNode)
    	break;
    len += 5;
  }
  if (!newNode)
    return;
}

newNode->user_data(layer);

std::vector<Layer *> *subLayers = layer->getLayers();

if(subLayers)
{
  for(unsigned i = 0; i < subLayers->size(); i++)
  {
    Layer *l = (*subLayers)[i];

    addLayerNodeRecursive(l, newNode);
  }
}
}
#include <FL/fl_draw.H>

Fl_Eval_Slider::Fl_Eval_Slider(int X, int Y, int W, int H, const char *L) : Fl_Slider(X, Y, W, H, L) {
  step(1, 100);
textfont_ = FL_HELVETICA;
textsize_ = 10;
textcolor_ = FL_FOREGROUND_COLOR;
}

void Fl_Eval_Slider::draw() {
  int sxx = x(), syy = y(), sww = w(), shh = h();
  int bxx = x(), byy = y(), bww = w(), bhh = h();
  if (horizontal()) {
    bww = 35; sxx += 35; sww -= 35;
  } else {
    syy += 25; bhh = 25; shh -= 25;
  }
  if (damage()&FL_DAMAGE_ALL) draw_box(box(),sxx,syy,sww,shh,color());
  Fl_Slider::draw(sxx+Fl::box_dx(box()),
          syy+Fl::box_dy(box()),
          sww-Fl::box_dw(box()),
          shh-Fl::box_dh(box()));
  draw_box(box(),bxx,byy,bww,bhh,color());
  char buf[128];
  snprintf(buf, 128, "%4.3f", value());
  //format(buf);
  fl_font(textfont(), textsize());
  fl_color(active_r() ? textcolor() : fl_inactive(textcolor()));
  fl_draw(buf, bxx, byy, bww, bhh, FL_ALIGN_CLIP);
}

int Fl_Eval_Slider::handle(int event) {
  if (event == FL_PUSH && Fl::visible_focus()) {
    Fl::focus(this);
    redraw();
  }
  int sxx = x(), syy = y(), sww = w(), shh = h();
  if (horizontal()) {
    sxx += 35; sww -= 35;
  } else {
    syy += 25; shh -= 25;
  }
  return Fl_Slider::handle(event,
               sxx+Fl::box_dx(box()),
               syy+Fl::box_dy(box()),
               sww-Fl::box_dw(box()),
               shh-Fl::box_dh(box()));
}

Fl_Font Fl_Eval_Slider::textfont() const {
  return (Fl_Font)textfont_;
}

void Fl_Eval_Slider::textfont(uchar s) {
  textfont_ = s;
}

uchar Fl_Eval_Slider::textsize() const {
  return textsize_;
}

void Fl_Eval_Slider::textsize(uchar s) {
  textsize_ = s;
}

Fl_Color Fl_Eval_Slider::textcolor() const {
  return (Fl_Color)textcolor_;
}

void Fl_Eval_Slider::textcolor(unsigned s) {
  textcolor_ = s;
}

float Fl_Eval_Slider::eval(float f) {
  return pow(f, 4);
}

float Fl_Eval_Slider::evalinv(float f) {
  return pow(f, .25);
}

float Fl_Eval_Slider::value() {
  return eval(Fl_Slider::value());
}

void Fl_Eval_Slider::value(float f) {
  Fl_Slider::value(evalinv(f));
}
